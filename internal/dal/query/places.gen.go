// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/crazygit/hpv-notification/internal/dal/model"
)

func newPlace(db *gorm.DB) place {
	_place := place{}

	_place.placeDo.UseDB(db)
	_place.placeDo.UseModel(&model.Place{})

	tableName := _place.placeDo.TableName()
	_place.ALL = field.NewAsterisk(tableName)
	_place.Identity = field.NewUint(tableName, "identity")
	_place.CreatedAt = field.NewTime(tableName, "created_at")
	_place.UpdatedAt = field.NewTime(tableName, "updated_at")
	_place.DeletedAt = field.NewField(tableName, "deleted_at")
	_place.ID = field.NewString(tableName, "id")
	_place.Name = field.NewString(tableName, "name")
	_place.CityName = field.NewString(tableName, "city_name")
	_place.Addr = field.NewString(tableName, "addr")
	_place.MingE = field.NewString(tableName, "ming_e")
	_place.Condition = field.NewString(tableName, "condition")
	_place.Method = field.NewString(tableName, "method")
	_place.Tel = field.NewString(tableName, "tel")
	_place.OrderId = field.NewString(tableName, "order_id")
	_place.YYTime = field.NewString(tableName, "yy_time")
	_place.Course = field.NewString(tableName, "course")
	_place.CityCode = field.NewString(tableName, "city_code")

	_place.fillFieldMap()

	return _place
}

type place struct {
	placeDo placeDo

	ALL       field.Asterisk
	Identity  field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ID        field.String
	Name      field.String
	CityName  field.String
	Addr      field.String
	MingE     field.String
	Condition field.String
	Method    field.String
	Tel       field.String
	OrderId   field.String
	YYTime    field.String
	Course    field.String
	CityCode  field.String

	fieldMap map[string]field.Expr
}

func (p place) Table(newTableName string) *place {
	p.placeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p place) As(alias string) *place {
	p.placeDo.DO = *(p.placeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *place) updateTableName(table string) *place {
	p.ALL = field.NewAsterisk(table)
	p.Identity = field.NewUint(table, "identity")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ID = field.NewString(table, "id")
	p.Name = field.NewString(table, "name")
	p.CityName = field.NewString(table, "city_name")
	p.Addr = field.NewString(table, "addr")
	p.MingE = field.NewString(table, "ming_e")
	p.Condition = field.NewString(table, "condition")
	p.Method = field.NewString(table, "method")
	p.Tel = field.NewString(table, "tel")
	p.OrderId = field.NewString(table, "order_id")
	p.YYTime = field.NewString(table, "yy_time")
	p.Course = field.NewString(table, "course")
	p.CityCode = field.NewString(table, "city_code")

	p.fillFieldMap()

	return p
}

func (p *place) WithContext(ctx context.Context) *placeDo { return p.placeDo.WithContext(ctx) }

func (p place) TableName() string { return p.placeDo.TableName() }

func (p place) Alias() string { return p.placeDo.Alias() }

func (p *place) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *place) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["identity"] = p.Identity
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["city_name"] = p.CityName
	p.fieldMap["addr"] = p.Addr
	p.fieldMap["ming_e"] = p.MingE
	p.fieldMap["condition"] = p.Condition
	p.fieldMap["method"] = p.Method
	p.fieldMap["tel"] = p.Tel
	p.fieldMap["order_id"] = p.OrderId
	p.fieldMap["yy_time"] = p.YYTime
	p.fieldMap["course"] = p.Course
	p.fieldMap["city_code"] = p.CityCode
}

func (p place) clone(db *gorm.DB) place {
	p.placeDo.ReplaceDB(db)
	return p
}

type placeDo struct{ gen.DO }

func (p placeDo) Debug() *placeDo {
	return p.withDO(p.DO.Debug())
}

func (p placeDo) WithContext(ctx context.Context) *placeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p placeDo) ReadDB() *placeDo {
	return p.Clauses(dbresolver.Read)
}

func (p placeDo) WriteDB() *placeDo {
	return p.Clauses(dbresolver.Write)
}

func (p placeDo) Clauses(conds ...clause.Expression) *placeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p placeDo) Returning(value interface{}, columns ...string) *placeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p placeDo) Not(conds ...gen.Condition) *placeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p placeDo) Or(conds ...gen.Condition) *placeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p placeDo) Select(conds ...field.Expr) *placeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p placeDo) Where(conds ...gen.Condition) *placeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p placeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *placeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p placeDo) Order(conds ...field.Expr) *placeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p placeDo) Distinct(cols ...field.Expr) *placeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p placeDo) Omit(cols ...field.Expr) *placeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p placeDo) Join(table schema.Tabler, on ...field.Expr) *placeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p placeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *placeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p placeDo) RightJoin(table schema.Tabler, on ...field.Expr) *placeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p placeDo) Group(cols ...field.Expr) *placeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p placeDo) Having(conds ...gen.Condition) *placeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p placeDo) Limit(limit int) *placeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p placeDo) Offset(offset int) *placeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p placeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *placeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p placeDo) Unscoped() *placeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p placeDo) Create(values ...*model.Place) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p placeDo) CreateInBatches(values []*model.Place, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p placeDo) Save(values ...*model.Place) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p placeDo) First() (*model.Place, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Place), nil
	}
}

func (p placeDo) Take() (*model.Place, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Place), nil
	}
}

func (p placeDo) Last() (*model.Place, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Place), nil
	}
}

func (p placeDo) Find() ([]*model.Place, error) {
	result, err := p.DO.Find()
	return result.([]*model.Place), err
}

func (p placeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Place, err error) {
	buf := make([]*model.Place, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p placeDo) FindInBatches(result *[]*model.Place, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p placeDo) Attrs(attrs ...field.AssignExpr) *placeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p placeDo) Assign(attrs ...field.AssignExpr) *placeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p placeDo) Joins(fields ...field.RelationField) *placeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p placeDo) Preload(fields ...field.RelationField) *placeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p placeDo) FirstOrInit() (*model.Place, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Place), nil
	}
}

func (p placeDo) FirstOrCreate() (*model.Place, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Place), nil
	}
}

func (p placeDo) FindByPage(offset int, limit int) (result []*model.Place, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p placeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p placeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p placeDo) Delete(models ...*model.Place) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *placeDo) withDO(do gen.Dao) *placeDo {
	p.DO = *do.(*gen.DO)
	return p
}
